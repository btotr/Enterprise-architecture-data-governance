# baseURI: https://opengroup.org/ns/togaf
# imports: http://spinrdf.org/spin
# imports: http://www.w3.org/ns/shacl#
# imports: https://opengroup.org/ns/archimate
# prefix: togaf

@prefix archimate: <https://opengroup.org/ns/archimate#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix togaf: <https://opengroup.org/ns/togaf#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

owl:Thing
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "c1" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "c2" ;
              ] ;
            sp:predicate owl:equivalentClass ;
            sp:subject [
                sp:varName "c1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "c2" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "c2" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "c2" ;
              ] ;
            sp:predicate owl:equivalentClass ;
            sp:subject [
                sp:varName "c1" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "c1" ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "x" ;
              ] ;
          ]
        ) ;
    ] ;
.
<https://opengroup.org/ns/togaf>
  a owl:Ontology ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:imports sh: ;
  owl:imports <https://opengroup.org/ns/archimate> ;
.
togaf:A-ArchitectureVision
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Architecture vision" ;
  rdfs:subClassOf togaf:ADMPhase ;
  sh:property [
      sh:path togaf:hasStep ;
      sh:in (
          togaf:EstablishTheArchitectureProject
          togaf:AssessReadinessForBusinessTransformation
          togaf:ConfirmAndElaborateArchitecturePrinciplesIncludingBusinessPrinciples
          togaf:ConfirmAndElaborateBusinessGoalsBusinessDriversAndConstraints
          togaf:DefineScope
          togaf:DefineTheTargetArchitectureValuePropositionsAndKPIs
          togaf:DevelopArchitectureVision
          togaf:DevelopStatementOfArchitectureWorkSecureApproval
          togaf:EvaluateCapabilities
          togaf:IdentifytheBusinessTransformationRisksAndMitigationActivities
          togaf:IdentifyStakeholdersConcernsAndBusinessRequirements
        ) ;
    ] ;
  togaf:hasContentModelEntity "togaf:Stakeholders" ;
.
togaf:ADMCycle
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Enterprise Architecture is a business capability; each cycle of the ADM should normally be handled as a project using the project management framework of the enterprise. The project is defined in step 1 of phase A, Architecture Vision." ;
  rdfs:label "ADM cycle" ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      sh:path togaf:hasPhase ;
      sh:maxCount 7 ;
    ] ;
.
togaf:ADMPhase
  a owl:Class ;
  rdfs:label "ADM phases" ;
  rdfs:subClassOf owl:Thing ;
.
togaf:ActorEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Actor and role entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:BusinessActor ;
.
togaf:ApplicationPortfolioCatalog
  a owl:Class ;
  spin:rule [
      a sp:Construct ;
    ] ;
  rdfs:comment "The purpose of this catalog is to identify and maintain a list of all the applications in the enterprise. This list helps to define the horizontal scope of change initiatives that may impact particular kinds of applications. An agreed Application Portfolio allows a standard set of applications to be defined and governed." ;
  rdfs:label "Application component" ;
  rdfs:subClassOf togaf:Catalog ;
.
togaf:ApplicationStandard
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:StandardInformationBase ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Application standard" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:Architecture
  a owl:Class ;
  rdfs:label "Architecture" ;
  rdfs:subClassOf togaf:Content ;
.
togaf:ArchitectureBuildingBlock
  a owl:Class ;
  rdfs:comment "Architecture Building Blocks (ABBs) relate to the Architecture Continuum and are defined or selected as a result of the application of the ADM." ;
  rdfs:label "Architecture building block" ;
  rdfs:subClassOf togaf:BuildingBlock ;
  owl:equivalentClass togaf:LogicalApplicationComponentEntity ;
.
togaf:ArchitectureCapability
  a owl:Class ;
  rdfs:comment "defines the parameters, structures, and processes that support governance of the Architecture Repository" ;
  rdfs:label "Architecture capability" ;
  rdfs:subClassOf togaf:Repository ;
.
togaf:ArchitectureCharter
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ArchitectureCapability ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Architecture charter" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:ArchitectureGovernanceConcept
  a owl:Class ;
  rdfs:label "Architecture governance concept" ;
  rdfs:subClassOf owl:Thing ;
.
togaf:ArchitectureLandscape
  a owl:Class ;
  rdfs:comment "presents an architectural representation of assets in use, or planned, by the enterprise at particular points in time" ;
  rdfs:label "Architecture landscape" ;
  rdfs:subClassOf togaf:Repository ;
.
togaf:ArchitectureMetamodel
  a owl:Class ;
  rdfs:comment "describes the organizationally tailored application of an architecture framework, including a method for architecture development and a metamodel for architecture content" ;
  rdfs:label "Architecture metamodel" ;
  rdfs:subClassOf togaf:Repository ;
.
togaf:ArchitecturePrincipleEntity
  a owl:Class ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "catalog" ;
              ] ;
            sp:predicate togaf:partOfCatalog ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:PrinciplesCatalog ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "catalog" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Architectural principles" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Principle ;
.
togaf:ArchitectureRequirementsRepository
  a owl:Class ;
  rdfs:comment "provides a view of all authorized architecture requirements which have been agreed with the Architecture Board" ;
  rdfs:label "Requirements repository" ;
  rdfs:subClassOf togaf:Repository ;
.
togaf:ArchitectureVision
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "The Architecture Vision is created early on in the ADM cycle. It provides a summary of the changes to the enterprise that will accrue from successful deployment of the Target Architecture. The purpose of the Architecture Vision is to provide key stakeholders with a formally agreed outcome. Early agreement on the outcome enables the architects to focus on the detail necessary to validate feasibility. Providing an Architecture Vision also supports stakeholder communication by providing a summary version of the full Architecture Definition." ;
  rdfs:label "Architecture vision" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:Artifact
  a owl:Class ;
  rdfs:comment "An artifact is an architectural work product that describes an aspect of the architecture" ;
  rdfs:label "Artifact" ;
  rdfs:subClassOf owl:Thing ;
.
togaf:AssessReadinessForBusinessTransformation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Business Transformation Readiness Assessment can be used to evaluate and quantify the organization's readiness to undergo a change. This assessment is based upon the determination and analysis/rating of a series of readiness factors" ;
  rdfs:label "Assess readiness for business transformation" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:AuthorityStructure
  a owl:Class ;
  rdfs:label "Authority structure" ;
  rdfs:subClassOf togaf:Content ;
.
togaf:B-BusinessArchitecture
  a owl:Class ;
  rdfs:comment "artifacts capture architectural models of business operation, looking specifically at factors that motivate the enterprise, how the enterprise is organizationally structured, and also what functional capabilities the enterprise has." ;
  rdfs:label "Business architecture" ;
  rdfs:subClassOf togaf:ADMPhase ;
  togaf:hasContentModelEntity "togaf:Drivers" ;
.
togaf:BenefitsDiagram
  a owl:Class ;
  rdfs:label "Benefits diagram" ;
  rdfs:subClassOf togaf:Diagram ;
.
togaf:BuildingBlock
  a owl:Class ;
  rdfs:comment "A building block represents a (potentially re-usable) component of enterprise capability that can be combined with other building blocks to deliver architectures and solutions" ;
  rdfs:label "Building block" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:BusinessServiceEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Business service entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:BusinessService ;
.
togaf:BusinessStandard
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:StandardInformationBase ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Business standard" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:BusinessStrategyEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Business strategy entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:C-InformationSystemsArchitecture
  a owl:Class ;
  rdfs:comment "artifacts capture architecture models of IT systems, looking at applications and data in line with the TOGAF ADM phases." ;
  rdfs:label "Information systems architecture" ;
  rdfs:subClassOf togaf:ADMPhase ;
  togaf:hasContentModelEntity "togaf:InformationSystemServices" ;
  togaf:hasContentModelEntity "togaf:PhysicalApplicationComponents" ;
.
togaf:CapabilityArchitecture
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Capability architecture" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
  owl:equivalentClass togaf:CapabilityAssessment ;
  sh:property [
      sh:path togaf:partOfRepository ;
      sh:class togaf:ArchitectureLandscape ;
    ] ;
.
togaf:CapabilityArchitectureRequirement
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ArchitectureRequirementsRepository ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Repository entity" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:CapabilityAssesment
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Capability assesment" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
  sh:property [
      sh:path togaf:partOfRepository ;
      sh:class togaf:GovernanceLog ;
    ] ;
.
togaf:CapabilityAssessment
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Before embarking upon a detailed Architecture Definition, it is valuable to understand the baseline and target capability level of the enterprise." ;
  rdfs:label "Capability assessment" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:CapabilityEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Capability entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:Catalog
  a owl:Class ;
  rdfs:label "Catalog" ;
  rdfs:subClassOf togaf:Artifact ;
  owl:equivalentClass archimate:Element ;
.
togaf:CommunicationsPlan
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Enterprise Architectures contain large volumes of complex and inter-dependent information. Effective communication of targeted information to the right stakeholders at the right time is a Critical Success Factor (CSF) for Enterprise Architecture. Development of a Communications Plan for architecture allows for this communication to be carried out within a planned and managed process." ;
  rdfs:label "Communications plan" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:Compliance
  a owl:Class ;
  rdfs:comment "Compliance assessments against Service-Level Agreements (SLAs), OLAs, standards, and regulatory requirements will be implemented on an ongoing basis to ensure stability, conformance, and performance monitoring. These assessments will be reviewed and either accepted or rejected depending on the criteria defined within the governance framework." ;
  rdfs:label "Compliance" ;
  rdfs:subClassOf togaf:Proces ;
.
togaf:ComplianceAssesment
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Compliance assesment" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
  owl:equivalentClass togaf:ComplianceAssessment ;
  sh:property [
      sh:path togaf:partOfRepository ;
      sh:class togaf:GovernanceLog ;
    ] ;
.
togaf:ComplianceAssessment
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Compliance assessment" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:ConfirmAndElaborateArchitecturePrinciplesIncludingBusinessPrinciples
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Review the principles under which the architecture is to be developed. Architecture Principles are normally based on the principles developed as part of the Preliminary Phase" ;
  rdfs:label "Confirm and elaborate architecture principles including business principles" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:ConfirmAndElaborateBusinessGoalsBusinessDriversAndConstraints
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """Identify the business goals and strategic drivers of the organization.

If these have already been defined elsewhere within the enterprise, ensure that the existing definitions are current, and clarify any areas of ambiguity. Otherwise, go back to the originators of the Statement of Architecture Work and work with them to define these essential items and secure their endorsement by corporate management.

Define the constraints that must be dealt with, including enterprise-wide constraints and project-specific constraints (time, schedule, resources, etc.). The enterprise-wide constraints may be informed by the business and Architecture Principles developed in the Preliminary Phase or clarified as part of Phase A.""" ;
  rdfs:label "Confirm and elaborate business goals business drivers and constraints" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:ConstraintEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Constraint entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:constraint ;
.
togaf:Content
  a owl:Class ;
  rdfs:label "content" ;
  rdfs:subClassOf togaf:ArchitectureGovernanceConcept ;
.
togaf:ContentMetaModelEntity
  a owl:Class ;
  rdfs:label "Content meta model entity" ;
  rdfs:subClassOf owl:Thing ;
.
togaf:Contract
  a owl:Class ;
  rdfs:label "Contract" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:ControlEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A decision-making step with accompanying decision logic used to determine execution approach for a process or to ensure that a process complies with governance criteria. For example, a sign-off control on the purchase request processing process that checks whether the total value of the request is within the sign-off limits of the requester, or whether it needs escalating to higher authority." ;
  rdfs:label "Control entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:CourseOfActionEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Course of action entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:CourseOfAction ;
.
togaf:D-TechnologyArchitecture
  a owl:Class ;
  rdfs:comment "artifacts capture procured technology assets that are used to implement and realize information system solutions." ;
  rdfs:label "Technology architecture" ;
  rdfs:subClassOf togaf:ADMPhase ;
.
togaf:DataEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Data entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:DataObject ;
.
togaf:DataStandard
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:StandardInformationBase ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Data standard" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:DecisionLog
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "a log of all architecturally significant decisions that have been made in the organization" ;
  rdfs:label "Decision log" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:DefineScope
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Define what is inside and what is outside the scope of the Baseline Architecture and Target Architecture efforts, understanding that the baseline and target need not be described at the same level of detail. In many cases, the baseline is described at a higher level of abstraction, so more time is available to specify the target in sufficient detail." ;
  rdfs:label "Define scope" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:DefineTheTargetArchitectureValuePropositionsAndKPIs
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Define the target architecture value propositions and KPIs" ;
  rdfs:subClassOf togaf:Step ;
  sh:property [
      sh:path togaf:contributeToDeliverble ;
      sh:class togaf:StatementOfArchitectureWork ;
    ] ;
.
togaf:DefinitionDocument
  a owl:Class ;
  rdfs:comment "The Architecture Definition Document is the deliverable container for the core architectural artifacts created during a project and for important related information. The Architecture Definition Document spans all architecture domains (business, data, application, and technology) and also examines all relevant states of the architecture (baseline, transition, and target)." ;
  rdfs:label "Definition document" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:Deliverable
  a owl:Class ;
  rdfs:comment "A deliverable is a work product that is contractually specified and in turn formally reviewed, agreed, and signed off by the stakeholders" ;
  rdfs:label "Deliverble" ;
  rdfs:subClassOf owl:Thing ;
.
togaf:DevelopArchitectureVision
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """An understanding of the required artifacts will enable the stakeholders to start to scope out their decision-making which will guide subsequent phases. These decisions need to be reflected in the stakeholder map.

Policy development and strategic decisions need to be captured in this phase to enable the subsequent work to be quantified; for example, rationalization decisions and metrics, revenue generation, and targets which meet the business strategy. There are also other areas which need to be addressed; for example, Digital Transformation and IT strategy where decisions on the Architecture Vision will provide leadership and direction for the organization in subsequent phases.

For the Architecture Vision it is recommended that first an overall architecture be decided upon showing how all of the various architecture domain deliverables will fit together (based upon the selected course of action).

Based on the stakeholder concerns, business capability requirements, scope, constraints, and principles, create a high-level view of the Baseline and Target Architectures. The Architecture Vision typically covers the breadth of scope identified for the project, at a high level. Informal techniques are often employed. A common practice is to draw a simple solution concept diagram that illustrates concisely the major components of the solution and how the solution will result in benefit for the enterprise.

Business scenarios are an appropriate and useful technique to discover and document business requirements, and to articulate an Architecture Vision that responds to those requirements. Business scenarios may also be used at more detailed levels of the architecture work (e.g., in Phase B).

This step generates the first, very high-level definitions of the baseline and target environments, from a business, information systems, and technology perspectives .

These initial versions of the architecture should be stored in the Architecture Repository, organized according to the standards and guidelines established in the architecture framework.""" ;
  rdfs:label "Develop architecture vision" ;
  rdfs:subClassOf togaf:Step ;
  sh:property [
      sh:path togaf:contributeToDeliverble ;
      sh:in togaf:ArchitectureVision ;
    ] ;
.
togaf:DevelopStatementOfArchitectureWorkSecureApproval
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Assess the work products that are required to be produced (and by when) against the set of business performance requirements" ;
  rdfs:label "Develop statement of architecture work secure approval" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:Diagram
  a owl:Class ;
  rdfs:label "Diagram" ;
  rdfs:subClassOf togaf:Artifact ;
  owl:equivalentClass archimate:Concept ;
.
togaf:DriverEntity
  a owl:Class ;
  rdfs:label "Drivers" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Driver ;
.
togaf:E-OpportunitiesAndSolutions
  a owl:Class ;
  rdfs:label "Opportunities and solutions" ;
  rdfs:subClassOf togaf:ADMPhase ;
.
togaf:EnvironmentManagement
  a owl:Class ;
  rdfs:comment """This identifies all the services required to ensure that the repository-based environment underpinning the governance framework is effective and efficient. This includes the physical and logical repository management, access, communication, training, and accreditation of all users.

All architecture artifacts, service agreements, contracts, and supporting information must come under governance through a formal process in order to register, validate, ratify, manage, and publish new or updated content. These processes will ensure the orderly integration with existing governance content such that all relevant parties, documents, contracts, and supporting information are managed and audited.

The governance environment will have a number of administrative processes defined in order to effect a managed service and process environment. These processes will include user management, internal SLAs (defined in order to control its own processes), and management information reporting.""" ;
  rdfs:label "Environment management" ;
  rdfs:subClassOf togaf:Proces ;
.
togaf:EstablishTheArchitectureProject
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """Enterprise Architecture is a business capability; each cycle of the ADM should normally be handled as a project using the project management framework of the enterprise. In some cases, architecture projects will be stand-alone. In other cases, architectural activities will be a subset of the activities within a larger project. In either case, architecture activity should be planned and managed using accepted practices for the enterprise.

Conduct the necessary procedures to secure recognition of the project, the endorsement of corporate management, and the support and commitment of the necessary line management. Include references to other management frameworks in use within the enterprise, explaining how this project relates to those frameworks.""" ;
  rdfs:label "Establish the architecture project" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:EvaluateCapabilities
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """It is valuable to understand a collection of capabilities within the enterprise. One part refers to the capability of the enterprise to develop and consume the architecture. The second part refers to the baseline and target capability level of the enterprise. Gaps identified in the Architecture Capability require iteration between Architecture Vision and Preliminary Phase to ensure that the Architecture Capability is suitable to address the scope of the architecture project.

A key step following from evaluation of business models, or artifacts that clarify priorities of a business strategy, is to identify the required business capabilities the enterprise must possess to act on the strategic priorities.
The detailed assessment of business capability gaps belongs in Phase B as a core aspect of the Business Architecture, where the architect can help the enterprise understand gaps throughout the business, of many types, that need to be addressed in later phases of the architecture.

In the Architecture Vision phase, however, the architect should consider the capability of the enterprise to develop the Enterprise Architecture itself, as required in the specific initiative or project underway. Gaps in the ability to progress through the ADM, whether deriving from skill shortages, information required, process weakness, or systems and tools, are a serious consideration in the vision of whether the architecture effort should continue.

Gaps, or limitations, identified in the enterprise's capability to execute on change will inform the architect on the description of the Target Architecture and on the Implementation and Migration Plan created in Phase E and Phase F. This step seeks to understand the capabilities and desires of the enterprise at an appropriate level of abstraction. Consideration of the gap between the baseline and target capability of the enterprise is critical. Showing the baseline and target capabilities within the context of the overall enterprise can be supported by creating Value Chain diagrams that show the linkage of related capabilities. The results of the assessment are documented in a Capability Assessment.""" ;
  rdfs:label "Evaluate capabilities" ;
  rdfs:subClassOf togaf:Step ;
  sh:property [
      sh:path togaf:contributeToDeliverble ;
      sh:in togaf:CapabilityAssessment ;
    ] ;
.
togaf:EventEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Event entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Event ;
.
togaf:F-MigrationPlanning
  a owl:Class ;
  rdfs:label "Migration planning" ;
  rdfs:subClassOf togaf:ADMPhase ;
.
togaf:FunctionEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Function entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:BusinessFunction ;
.
togaf:G-ImplementationGovernance
  a owl:Class ;
  rdfs:label "Implementation governance" ;
  rdfs:subClassOf togaf:ADMPhase ;
  togaf:hasContentModelEntity "togaf:Guidelines" ;
  togaf:hasContentModelEntity "togaf:Specifications" ;
  togaf:hasContentModelEntity "togaf:Standards" ;
.
togaf:GapEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Gap entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Gap ;
.
togaf:GoalEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Goal entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Goal ;
.
togaf:GovernanceLog
  a owl:Class ;
  rdfs:comment "provides a record of governance activity across the enterprise" ;
  rdfs:label "Governance log" ;
  rdfs:subClassOf togaf:Repository ;
  sh:property [
      sh:path togaf:partOfRepository ;
      sh:class togaf:DecisionLog ;
    ] ;
.
togaf:GuidelineEntity
  a owl:Class ;
  rdfs:label "Guidelines" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:H-ArchitectureChangeManagement
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "H-Implementing change management" ;
  rdfs:subClassOf togaf:ADMPhase ;
.
togaf:IdentifyStakeholdersConcernsAndBusinessRequirements
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """Identify the key stakeholders and their concerns/objectives, and define the key business requirements to be addressed in the architecture engagement. Stakeholder engagement at this stage is intended to accomplish three objectives:

- To identify candidate vision components and requirements to be tested as the Architecture Vision is developed
- To identify candidate scope boundaries for the engagement to limit the extent of architectural investigation required
- To identify stakeholder concerns, issues, and cultural factors that will shape how the architecture is presented and communicated

The major product resulting from this step is a stakeholder map for the engagement, showing which stakeholders are involved with the engagement, their level of involvement, and their key concerns. The stakeholder map is used to support various outputs of the Architecture Vision phase, and to identify:

The concerns and viewpoints that are relevant to this project; this is captured in the Architecture Vision
The stakeholders that are involved with the project and as a result form the starting point for a Communications Plan 
The key roles and responsibilities within the project, which should be included within the Statement of Architecture Work
Another key task will be to consider which architecture views and viewpoints need to be developed to satisfy the various stakeholder requirements. As described in Part III, 21. Stakeholder Management , understanding at this stage which stakeholders and which views need to be developed is important in setting the scope of the engagement.

During the Architecture Vision phase, new requirements generated for future architecture work within the scope of the selected requirements need to be documented within the Architecture Requirements Specification, and new requirements which are beyond the scope of the selected requirements must be input to the Requirements Repository for management through the Requirements Management process.""" ;
  rdfs:label "Identify stakeholders concerns and business requirements" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:IdentifytheBusinessTransformationRisksAndMitigationActivities
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Identify the risks associated with the Architecture Vision and assess the initial level of risk (e.g., catastrophic, critical, marginal, or negligible) and the potential frequency associated with it. Assign a mitigation strategy for each risk." ;
  rdfs:label "Identifythe business transformation risks and Mitigation activities" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:InformationSystemServiceEntity
  a owl:Class ;
  rdfs:label "Information system services" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:ApplicationService ;
.
togaf:LocationEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Location entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Location ;
.
togaf:LogicalApplicationComponentEntity
  a owl:Class ;
  rdfs:label "Logical application component" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:Matrix
  a owl:Class ;
  rdfs:label "Matrix" ;
  rdfs:subClassOf togaf:Artifact ;
  owl:equivalentClass archimate:Relationship ;
.
togaf:MeasureEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "An indicator or factor that can be tracked, usually on an ongoing basis, to determine success or alignment with objectives and goals." ;
  rdfs:label "Measure entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:ObjectiveEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A time-bounded milestone for an organization used to demonstrate progress towards a goal; for example, \"Increase capacity utilization by 30% by the end of 2019 to support the planned increase in market share\"." ;
  rdfs:label "Objective entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:OrganizationStructure
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ArchitectureCapability ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Organization structure" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:OrganizationUnitEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Organization unit entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:OrganizationalStandard
  a owl:Class ;
  rdfs:label "Organizational standard" ;
  rdfs:subClassOf togaf:Content ;
.
togaf:PhysicalApplicationComponentEntity
  a owl:Class ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "catalog" ;
              ] ;
            sp:predicate togaf:partOfCatalog ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ApplicationPortfolioCatalog ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "catalog" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Physical application components" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:ApplicationComponent ;
.
togaf:PhysicalTechnologyComponentEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Physical technology component entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Node ;
.
togaf:Preliminary
  a owl:Class ;
  rdfs:label "Preliminary" ;
  rdfs:subClassOf togaf:ADMPhase ;
.
togaf:Principles
  a owl:Class ;
  rdfs:label "Principle" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:PrinciplesCatalog
  a owl:Class ;
  rdfs:label "Principles catalog" ;
  rdfs:subClassOf togaf:Catalog ;
.
togaf:Proces
  a owl:Class ;
  rdfs:comment "Governance processes are required to identify, manage, audit, and disseminate all information related to architecture management, contracts, and implementation. These governance processes will be used to ensure that all architecture artifacts and contracts, principles, and Operational-Level Agreements (OLAs) are monitored on an ongoing basis with clear auditability of all decisions made." ;
  rdfs:label "Proces" ;
  rdfs:subClassOf togaf:ArchitectureGovernanceConcept ;
.
togaf:ProcessEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Process entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:BusinessProcess ;
.
togaf:ProductEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Product entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Product ;
.
togaf:ProjectContextDiagram
  a owl:Class ;
  rdfs:label "Project context diagram" ;
  rdfs:subClassOf togaf:Diagram ;
.
togaf:Reference
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ReferenceLibrary ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Reference" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:ReferenceLibrary
  a owl:Class ;
  rdfs:comment "provides guidelines, templates, patterns, and other forms of reference material that can be leveraged in order to accelerate the creation of new architectures for the enterprise" ;
  rdfs:label "Reference library" ;
  rdfs:subClassOf togaf:Repository ;
.
togaf:Repository
  a owl:Class ;
  rdfs:label "Repository" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:RepositoryEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Repository entity" ;
  rdfs:subClassOf owl:Thing ;
.
togaf:Requirement
  a owl:Class ;
  rdfs:label "Requirement" ;
  rdfs:subClassOf togaf:Content ;
.
togaf:RequirementEntity
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "catalog" ;
              ] ;
            sp:predicate togaf:partOfCatalog ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:RequirementsCatalog ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "catalog" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Requirement entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:RequirementsCatalog
  a owl:Class ;
  rdfs:label "Requirements catalog" ;
  rdfs:subClassOf togaf:Catalog ;
.
togaf:RequirementsSpecification
  a owl:Class ;
  rdfs:label "Requirements specification" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:Roadmap
  a owl:Class ;
  rdfs:label "Roadmap" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:RolEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Rol entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:BusinessRole ;
.
togaf:SLA
  a owl:Class ;
  rdfs:label "SLA" ;
  rdfs:subClassOf togaf:Content ;
.
togaf:SegmentArchitecture
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Segment architecture" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:SegmentArchitectureRequirements
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ArchitectureRequirementsRepository ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Segment architecture requirements " ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:SelectReferenceModelsViewpointsAndTools
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Select reference models viewpoints and tools" ;
  rdfs:subClassOf togaf:Step ;
.
togaf:ServiceEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Service entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:BusinessService ;
.
togaf:ServiceQualityEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Servive quality entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:Skills
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ArchitectureCapability ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Skills" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:Solution
  a owl:Class ;
  rdfs:label "Solution" ;
  rdfs:subClassOf togaf:Content ;
.
togaf:SolutionBuildingBlock
  a owl:Class ;
  rdfs:comment "Solution Building Blocks (SBBs) relate to the Solutions Continuum and may be either procured or developed." ;
  rdfs:label "Solution building block" ;
  rdfs:subClassOf togaf:BuildingBlock ;
  owl:equivalentClass [
      a owl:Class ;
      owl:unionOf (
          togaf:PhysicalApplicationComponentEntity
          togaf:PhysicalTechnologyComponentEntity
        ) ;
    ] ;
.
togaf:SolutionConceptDiagram
  a owl:Class ;
  rdfs:label "Solution concept diagram" ;
  rdfs:subClassOf togaf:Diagram ;
.
togaf:SolutionsLandscape
  a owl:Class ;
  rdfs:comment "presents an architectural representation of the Solution Building Blocks (SBBs) supporting the Architecture Landscape which have been planned or deployed by the enterprise" ;
  rdfs:label "Solutions landscape" ;
  rdfs:subClassOf togaf:Repository ;
.
togaf:SpecificationEntity
  a owl:Class ;
  rdfs:label "Specifications" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:StakeholderApproachValue
  a owl:Class ;
  rdfs:subClassOf [
      a owl:Class ;
      owl:oneOf (
          togaf:keepSatisfied
          togaf:keyPlayer
          togaf:minimalEffort
          togaf:keepInformed
        ) ;
    ] ;
.
togaf:StakeholderEntity
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "matrix" ;
              ] ;
            sp:predicate togaf:partOfMatrix ;
            sp:subject [
                sp:varName "rel" ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:StakeholderMapMatrix ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "matrix" ;
              ] ;
          ]
          [
            sp:object togaf:StakeholderEntity ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "Stakeholder" ;
              ] ;
          ]
          [
            sp:object togaf:DriverEntity ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "driver" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "Stakeholder" ;
              ] ;
            sp:predicate archimate:from ;
            sp:subject [
                sp:varName "rel" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "driver" ;
              ] ;
            sp:predicate archimate:to ;
            sp:subject [
                sp:varName "rel" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Stakeholders" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:Stakeholder ;
  sh:property [
      sh:path togaf:stakeholderApproach ;
      sh:in (
          togaf:keepSatisfied
          togaf:keyPlayer
          togaf:minimalEffort
          togaf:keepInformed
        ) ;
    ] ;
.
togaf:StakeholderMapMatrix
  a owl:Class ;
  rdfs:comment """The purpose of the Stakeholder Map matrix is to identify the stakeholders for the architecture engagement, their influence over the engagement, and their key questions, issues, or concerns that must be addressed by the architecture framework.

Understanding stakeholders and their requirements allows an architect to focus effort in areas that meet the needs of stakeholders.

Due to the potentially sensitive nature of stakeholder mapping information and the fact that the Architecture Vision phase is intended to be conducted using informal modeling techniques, no specific metamodel entities will be used to generate a stakeholder map.""" ;
  rdfs:label "Stakeholder map matrix" ;
  rdfs:subClassOf togaf:Matrix ;
.
togaf:StandardEntity
  a owl:Class ;
  rdfs:label "Standards" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:StandardInformationBase
  a owl:Class ;
  rdfs:label "Standard information base" ;
  rdfs:subClassOf togaf:Repository ;
.
togaf:StatementOfArchitectureWork
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """The TOGAF framework provides an industry standard for architecture that may be used in a wide variety of organizations. However, before the TOGAF framework can be effectively used within an architecture project, tailoring at two levels is necessary.

Firstly, it is necessary to tailor the TOGAF model for integration into the enterprise. This tailoring will include integration with management frameworks, customization of terminology, development of presentational styles, selection, configuration, and deployment of architecture tools, etc. The formality and detail of any frameworks adopted should also align with other contextual factors for the enterprise, such as culture, stakeholders, commercial models for Enterprise Architecture, and the existing level of Architecture Capability.

Once the framework has been tailored to the enterprise, further tailoring is necessary in order to tailor the framework for the specific architecture project. Tailoring at this level will select appropriate deliverables and artifacts to meet project and stakeholder needs.""" ;
  rdfs:label "Statement of architecture work" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:Step
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Step" ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      sh:path togaf:done ;
      sh:datatype xsd:boolean ;
      sh:maxCount 1 ;
    ] ;
.
togaf:StrategicArchitecture
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Strategic architecture" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:StrategicArchitectureRequirements
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:ArchitectureRequirementsRepository ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Strategic architecture requirements" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:TailoredArchitectureFramework
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """The TOGAF framework provides an industry standard for architecture that may be used in a wide variety of organizations. However, before the TOGAF framework can be effectively used within an architecture project, tailoring at two levels is necessary.

Firstly, it is necessary to tailor the TOGAF model for integration into the enterprise. This tailoring will include integration with management frameworks, customization of terminology, development of presentational styles, selection, configuration, and deployment of architecture tools, etc. The formality and detail of any frameworks adopted should also align with other contextual factors for the enterprise, such as culture, stakeholders, commercial models for Enterprise Architecture, and the existing level of Architecture Capability.

Once the framework has been tailored to the enterprise, further tailoring is necessary in order to tailor the framework for the specific architecture project. Tailoring at this level will select appropriate deliverables and artifacts to meet project and stakeholder needs.""" ;
  rdfs:label "Tailored architecture framework" ;
  rdfs:subClassOf togaf:Deliverable ;
.
togaf:TechnologyServiceEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Technology service entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:TechnologyService ;
.
togaf:TechnologyStandard
  a owl:Class ;
  a sh:NodeShape ;
  spin:rule [
      a sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "repo" ;
              ] ;
            sp:predicate togaf:partOfRepository ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object togaf:StandardInformationBase ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "repo" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "Technology standard" ;
  rdfs:subClassOf togaf:RepositoryEntity ;
.
togaf:ValueChainDiagram
  a owl:Class ;
  rdfs:label "Value chain diagram" ;
  rdfs:subClassOf togaf:Diagram ;
.
togaf:ValueStreamEntity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A representation of an end-to-end collection of value-adding activities that create an overall result for a customer, stakeholder, or end-user." ;
  rdfs:label "Value stream entity" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
.
togaf:WorkPackageEntity
  a owl:Class ;
  rdfs:label "Work packages" ;
  rdfs:subClassOf togaf:ContentMetaModelEntity ;
  owl:equivalentClass archimate:WorkPackage ;
  togaf:hasContentModelEntity "togaf:ArchitecturePrinciples" ;
.
togaf:comment
  a owl:DatatypeProperty ;
  rdfs:domain togaf:Step ;
  rdfs:label "comment" ;
  rdfs:range xsd:string ;
.
togaf:contributeToDeliverble
  a owl:ObjectProperty ;
  rdfs:domain togaf:Step ;
  rdfs:label "Contribute to deliverble" ;
  rdfs:range togaf:Deliverable ;
.
togaf:describes
  a owl:ObjectProperty ;
  rdfs:domain togaf:Artifact ;
  rdfs:label "descrbes" ;
  rdfs:range togaf:BuildingBlock ;
.
togaf:done
  a owl:DatatypeProperty ;
  rdfs:comment "Set a step as ready." ;
  rdfs:domain togaf:Step ;
  rdfs:label "done" ;
  rdfs:range xsd:boolean ;
.
togaf:hasContentModelEntity
  a owl:ObjectProperty ;
  rdfs:label "has content model entity" ;
.
togaf:hasElement
  a owl:ObjectProperty ;
  rdfs:domain togaf:Catalog ;
  rdfs:label "has element" ;
  rdfs:range archimate:Element ;
.
togaf:hasPhase
  a owl:ObjectProperty ;
  rdfs:domain togaf:ADMCycle ;
  rdfs:label "has phase" ;
  rdfs:range togaf:ADMPhase ;
.
togaf:hasRelationship
  a owl:ObjectProperty ;
  rdfs:domain togaf:Matrix ;
  rdfs:label "has relationship" ;
  rdfs:range archimate:Relationship ;
.
togaf:hasStep
  a owl:ObjectProperty ;
  rdfs:domain togaf:ADMPhase ;
  rdfs:label "has step" ;
  rdfs:range togaf:Step ;
.
togaf:identifiedConcerns
  a owl:ObjectProperty ;
  rdfs:domain togaf:IdentifyStakeholdersConcernsAndBusinessRequirements ;
  rdfs:label "identified concerns" ;
  rdfs:range togaf:DriverEntity ;
  rdfs:subPropertyOf togaf:identifiedEntity ;
.
togaf:identifiedConstraints
  a owl:ObjectProperty ;
  rdfs:domain togaf:ConfirmAndElaborateBusinessGoalsBusinessDriversAndConstraints ;
  rdfs:label "identified constraints" ;
  rdfs:range togaf:ConstraintEntity ;
  rdfs:subPropertyOf togaf:identifiedEntity ;
.
togaf:identifiedDrivers
  a owl:ObjectProperty ;
  rdfs:domain togaf:ConfirmAndElaborateBusinessGoalsBusinessDriversAndConstraints ;
  rdfs:label "identified drivers" ;
  rdfs:range togaf:DriverEntity ;
  rdfs:subPropertyOf togaf:identifiedEntity ;
.
togaf:identifiedEntity
  a owl:ObjectProperty ;
  rdfs:domain togaf:Step ;
  rdfs:label "identified entity" ;
  rdfs:range togaf:ContentMetaModelEntity ;
.
togaf:identifiedGoals
  a owl:ObjectProperty ;
  rdfs:domain togaf:ConfirmAndElaborateBusinessGoalsBusinessDriversAndConstraints ;
  rdfs:label "identified goals" ;
  rdfs:range togaf:GoalEntity ;
  rdfs:subPropertyOf togaf:identifiedEntity ;
.
togaf:identifiedRequirement
  a owl:ObjectProperty ;
  rdfs:domain togaf:IdentifyStakeholdersConcernsAndBusinessRequirements ;
  rdfs:label "identified requirement" ;
  rdfs:range togaf:RequirementEntity ;
  rdfs:subPropertyOf togaf:identifiedEntity ;
.
togaf:identifiedStakeholder
  a owl:ObjectProperty ;
  rdfs:domain togaf:IdentifyStakeholdersConcernsAndBusinessRequirements ;
  rdfs:label "identified stakeholders" ;
  rdfs:range togaf:StakeholderEntity ;
  rdfs:subPropertyOf togaf:identifiedEntity ;
.
togaf:keepInformed
  a togaf:StakeholderApproachValue ;
.
togaf:keepSatisfied
  a togaf:StakeholderApproachValue ;
.
togaf:keyPlayer
  a togaf:StakeholderApproachValue ;
.
togaf:minimalEffort
  a togaf:StakeholderApproachValue ;
.
togaf:partOfCatalog
  a owl:ObjectProperty ;
  rdfs:label "part of catalog" ;
.
togaf:partOfMatrix
  a owl:ObjectProperty ;
  rdfs:label "part of matrix" ;
.
togaf:partOfRepository
  a owl:ObjectProperty ;
  rdfs:label "has repository entity" ;
.
togaf:principleImplication
  a owl:DatatypeProperty ;
  rdfs:domain togaf:ArchitecturePrincipleEntity ;
  rdfs:label "principle implication" ;
  rdfs:range xsd:string ;
.
togaf:principleRationale
  a owl:DatatypeProperty ;
  rdfs:comment "Should highlight the business benefits of adhering to the principle, using business terminology. Point to the similarity of information and technology principles to the principles governing business operations. Also describe the relationship to other principles, and the intentions regarding a balanced interpretation. Describe situations where one principle would be given precedence or carry more weight than another for making a decision." ;
  rdfs:domain togaf:ArchitecturePrincipleEntity ;
  rdfs:label "principle rationale" ;
  rdfs:range xsd:string ;
.
togaf:principleStatement
  a owl:DatatypeProperty ;
  rdfs:comment "Should succinctly and unambiguously communicate the fundamental rule. For the most part, the principles statements for managing information are similar from one organization to the next. It is vital that the principles statement is unambiguous." ;
  rdfs:domain togaf:ArchitecturePrincipleEntity ;
  rdfs:label "Principle statement" ;
  rdfs:range xsd:string ;
.
togaf:principles
  a owl:ObjectProperty ;
  rdfs:domain togaf:DefinitionDocument ;
  rdfs:label "principles" ;
  rdfs:range togaf:ArchitecturePrincipleEntity ;
.
togaf:scope
  a owl:DatatypeProperty ;
  rdfs:domain togaf:Deliverable ;
  rdfs:label "scope" ;
  rdfs:range xsd:string ;
.
togaf:stakeholderApproach
  a owl:ObjectProperty ;
  rdfs:domain togaf:StakeholderEntity ;
  rdfs:range togaf:StakeholderApproachValue ;
.
(
  []
).
(
  [
    a sp:Union ;
  ]
).
(
  (
    []
  )
  (
    []
  )
).
